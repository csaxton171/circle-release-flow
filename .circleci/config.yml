commands:
  assume-role:
    parameters:
      role:
        type: string
    steps:
    - aws-cli/install
    - aws-cli/configure
    - run:
        command: |
          temp_role=$(aws sts assume-role --role-arn << parameters.role >> --role-session-name "circle-assumed")
          echo "export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId -r)" >> $BASH_ENV
          echo "export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey -r)" >> $BASH_ENV
          echo "export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken -r)" >> $BASH_ENV
        name: Assuming Role
  git-merge-branch:
    description: merge merge_branch into base_branch
    parameters:
      base_branch:
        type: string
      merge_branch:
        type: string
      simulate:
        default: false
        type: boolean
      tag:
        default: ${RELEASE_VERSION}
        type: string
      trigger_ci:
        default: true
        type: boolean
    steps:
    - run:
        command: |
          ./scripts/ci-merge-branch.sh \
              --base=<< parameters.base_branch >> \
              --merge=<< parameters.merge_branch >> \
              --simulate=<< parameters.simulate >> \
              --trigger=<< parameters.trigger_ci >> \
              --tag=<< parameters.tag >>
        name: merge to '<< parameters.base_branch >> [simulate=<< parameters.simulate
          >>]'
  git-set-identity:
    parameters:
      email:
        default: automation@news.co.uk
        type: string
      fingerprint:
        default: 28:47:ff:1c:eb:a1:30:45:41:88:4c:6f:9d:43:ae:80
        type: string
      username:
        default: automation
        type: string
    steps:
    - add_ssh_keys:
        fingerprints:
        - << parameters.fingerprint >>
    - run:
        command: |
          git config --global user.email "<< parameters.email >>"
          git config --global user.name "<< parameters.username >>"
          mkdir -p ~/.ssh \
            && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
        name: set git user identity
  install-dependencies:
    description: Install Dependencies
    steps:
    - run:
        command: yarn install --frozen-lockfile
        name: Install Dependencies
  restore-yarn:
    description: Restore Yarn Package Cache
    steps:
    - restore_cache:
        key: << pipeline.parameters.yarn-cache-version >>-yarn-packages-{{ checksum
          "yarn.lock" }}
  save-yarn:
    description: Save Yarn Package Cache
    steps:
    - save_cache:
        key: << pipeline.parameters.yarn-cache-version >>-yarn-packages-{{ checksum
          "yarn.lock" }}
        paths:
        - ~/.cache/yarn
executors:
  node:
    docker:
    - image: circleci/node:12.14.0
  terraform:
    docker:
    - image: nukengprodservice/aws-cli
filter-develop-only:
  filters:
    branches:
      only: develop
filter-master-only:
  filters:
    branches:
      only: master
filter-release-only:
  filters:
    branches:
      only: /^release\/.*$/
jobs:
  deploy-infrastructure:
    executor: node
    parameters:
      environment:
        type: string
    steps:
    - attach_workspace:
        at: ./
    - run:
        command: echo "[simulation] deploying infrastructure..."
        name: deploy infrastructure [<< parameters.environment >>]
  deploy-system:
    executor: node
    parameters:
      environment:
        type: string
    steps:
    - attach_workspace:
        at: ./
    - run:
        command: echo "[simulation] deploying system..."
        name: deploy system [<< parameters.environment >>]
  node-setup:
    executor: node
    steps:
    - checkout
    - restore-yarn
    - install-dependencies
    - save-yarn
    - persist_to_workspace:
        paths:
        - ./
        root: ./
  node-test:
    executor: node
    steps:
    - attach_workspace:
        at: ./
    - run:
        command: |
          yarn test \
              --coverage \
              --reporters="default" \
              --reporters="jest-junit"
        name: run tests
    - store_test_results:
        path: ./junit.xml
    - store_artifacts:
        path: ./coverage
  node-validate:
    executor: node
    steps:
    - attach_workspace:
        at: ./
    - run:
        command: yarn fmt:diff
        name: assert code formatting standards
  pre-release:
    executor: node
    steps:
    - attach_workspace:
        at: ./
    - run:
        command: echo "execute pre-release actions here"
        name: execute pre-release actions
  release-create:
    executor: node
    parameters:
      release_name:
        default: ""
        type: string
      source_branch:
        default: develop
        type: string
    steps:
    - attach_workspace:
        at: ./
    - git-set-identity
    - run:
        command: |
          release_name=$([[ -z "<< parameters.release_name >>" ]] && echo "release/$(date +%Y.%m.%d.%H%M)" || echo "release/<< parameters.release_name >>")
          echo "export RELEASE_BRANCH_NAME=$release_name" >> $BASH_ENV
          git checkout -B "$release_name" "<< parameters.source_branch >>"
        name: establish release branch
    - run:
        command: |
          git branch
          git checkout ${RELEASE_BRANCH_NAME}
          yarn release
        name: bump version and document
    - run:
        command: |
          git push -u origin ${RELEASE_BRANCH_NAME}
        name: publish release
  release-promote:
    executor: node
    parameters:
      production_branch:
        default: master
        type: string
    steps:
    - attach_workspace:
        at: ./
    - git-set-identity
    - run:
        command: |
          echo "export RELEASE_BRANCH_NAME=$CIRCLE_BRANCH" >> $BASH_ENV
          echo "export RELEASE_VERSION=$(cat package.json | jq -r .version)" >> $BASH_ENV
        name: set release info
    - git-merge-branch:
        base_branch: develop
        merge_branch: $RELEASE_BRANCH_NAME
        simulate: true
    - git-merge-branch:
        base_branch: master
        merge_branch: $RELEASE_BRANCH_NAME
        simulate: true
    - git-merge-branch:
        base_branch: develop
        merge_branch: $RELEASE_BRANCH_NAME
        trigger_ci: false
    - git-merge-branch:
        base_branch: master
        merge_branch: $RELEASE_BRANCH_NAME
    - run:
        command: "git fetch --all \ngit checkout origin master\n\nif [[ -z $(git tag
          -l \"v${RELEASE_VERSION}\") ]]; then\n  git tag \"v${RELEASE_VERSION}\"\n
          \ git push --tags\nfi\n"
        name: tag release
    - run:
        command: |
          git branch -D "$RELEASE_BRANCH_NAME"
          git push --delete "$RELEASE_BRANCH_NAME"
        name: remove release branch
  workaround-approval-skip-bug:
    executor: node
    steps:
    - run:
        command: echo "a bug in circleci causes a workflow starting with an approval
          to run regardless of 'ci-skip' directive presence"
        name: workaround workflow skip/approval bug
orbs:
  aws-cli: circleci/aws-cli@0.1.15
  jq: circleci/jq@1.9.0
parameters:
  yarn-cache-version:
    default: v1
    type: string
version: 2.1
workflows:
  deploy-prod-workflow:
    jobs:
    - node-setup:
        filters:
          branches:
            only: master
    - deploy-infrastructure:
        environment: production
        requires:
        - node-setup
    - deploy-system:
        environment: production
        requires:
        - deploy-infrastructure
  initiate-release-workflow:
    jobs:
    - node-setup:
        filters:
          branches:
            only: /^release\/.*$/
    - node-validate:
        requires:
        - node-setup
    - node-test:
        requires:
        - node-setup
    - deploy-infrastructure:
        environment: staging
        requires:
        - node-validate
        - node-test
    - deploy-system:
        environment: staging
        requires:
        - deploy-infrastructure
    - hold-release-review:
        requires:
        - deploy-infrastructure
        - deploy-system
        type: approval
    - release-promote:
        requires:
        - hold-release-review
  offer-release-workflow:
    jobs:
    - node-setup:
        filters:
          branches:
            only: develop
    - hold-release:
        requires:
        - node-setup
        type: approval
    - release-create:
        requires:
        - hold-release
  validate-branch-workflow:
    jobs:
    - node-setup:
        filters:
          branches:
            ignore:
            - master
            - develop
            - /^release\/.*$/
    - node-validate:
        requires:
        - node-setup
    - node-test:
        requires:
        - node-setup
  version: 2.1

